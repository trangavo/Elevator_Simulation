{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "elevator2.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "xDSDRQP5rbaB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Assignment 1: Elevator Simulation\n",
        "Brian Githire Wahome, Yuhao Chen, Nguyá»…n Thu Trang, Braden Scherting\n",
        "20/01/2019\n"
      ]
    },
    {
      "metadata": {
        "id": "JxmYDWxvrX_0",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# import relevant libraries\n",
        "\n",
        "import numpy as np\n",
        "from operator import attrgetter\n",
        "from scipy import stats\n",
        "import random\n",
        "import string\n",
        "\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "zNOa2qTKsKGZ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Class Definitions"
      ]
    },
    {
      "metadata": {
        "id": "kpQcQNXEsIXJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Create a building with a specified number of floors\n",
        "class Building():\n",
        "    def __init__(self, num_floors):\n",
        "        self.num_floors = num_floors\n",
        "        \n",
        "\n",
        "# Create a passenger with a unique location and destination, at_destination is a dummy variable\n",
        "class Passenger():\n",
        "    def __init__(self, location, destination, at_destination):\n",
        "        self.location = location\n",
        "        self.destination = destination\n",
        "        self.at_destination = at_destination\n",
        "        \n",
        "        \n",
        "# Create an elevator with locations and a specified capacity, occupants is a list of passengers on the elevator\n",
        "class Elevator():\n",
        "    \n",
        "    def __init__(self, location, capacity):\n",
        "        self.location = location\n",
        "        self.capacity = capacity\n",
        "        self.occupants = []\n",
        "        \n",
        "    # Move the elevator up one floor\n",
        "    def move_up(self):\n",
        "        self.location += 1\n",
        "        \n",
        "    # Move the elevator down one floor\n",
        "    def move_down(self):\n",
        "        self.location -= 1\n",
        "        \n",
        "    # Move the elevator to a given floor\n",
        "    def to_floor(self, go_to):\n",
        "        self.location = go_to\n",
        "        \n",
        "    # Unload the elevator\n",
        "    def unload(self):\n",
        "        # for each person in the elevator whose destination is the same as the\n",
        "        # elevator's location, remove them from the elevator and mark their location as \"arrived\"\n",
        "        for person in self.occupants:\n",
        "            if person.destination == self.location:\n",
        "                person.location =  'arrived'\n",
        "                self.occupants.remove(person)\n",
        "    \n",
        "    # Load the elevator\n",
        "    def load(self, people):\n",
        "        # At a certain floor, if there is still space in the elevator,\n",
        "        # load as many people who are waiting on that floor as possible to the elevator\n",
        "        if len(self.occupants) < self.capacity:\n",
        "            queued = [person for person in people if person.location==self.location]\n",
        "            for person in queued[:(self.capacity-len(self.occupants))]:\n",
        "                person.location = 'on elevator'\n",
        "                self.occupants.append(person)\n",
        "            return\n",
        "        # If the elevator is full, don't do anything\n",
        "        elif len(self.occupants) == self.capacity:\n",
        "            return\n",
        "        else:\n",
        "            print('overfull')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "oDG2-HLsr23s",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Strategy 1 (from assignment description):\n",
        "The elevator starts from the ground floor and moves all the way to the top floor,\n",
        "stopping at every floor in between. When the elevator reaches the top floor, it changes direction\n",
        "and moves all the way back down to the ground floor, again stopping at every floor in between. At every floor where the elevator stops any passengers who want to get off leave and any passengers who want to get on enter, as long as there is space in the elevator. If the elevator is full, passengers on that floor have to wait. Upon reaching the ground floor, the elevator repeats the cycle of moving all the way up and all the way down the building."
      ]
    },
    {
      "metadata": {
        "id": "-QRd3u7Ar2Rf",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def strategy_1(start_floor, elev_cap, num_floors, num_people, print_status=False):\n",
        "    # Create an Elevator object and a Building object\n",
        "    elevator = Elevator(location=start_floor, capacity=elev_cap)\n",
        "    building = Building(num_floors)\n",
        "    \n",
        "    # Create a list of all the people in the building\n",
        "    people = []\n",
        "    \n",
        "    # The number of stops that the elevator makes indicates efficiency\n",
        "    num_of_stops=0\n",
        "    \n",
        "    # Create people objects with random initial floors and destinations\n",
        "    for i in range(num_people):\n",
        "        # Generate a random integer between 1 and the number of floors to get\n",
        "        # an initial floor for each person\n",
        "        init_floor = np.random.randint(1, num_floors+1)\n",
        "        # Generate a random integer between 1 and the number of floors that\n",
        "        # is different from the initial floor generated above to get\n",
        "        # a destination floor for each person\n",
        "        f = [x for x in range(1, num_floors+1) if x != init_floor]\n",
        "        destination = np.random.choice(f)\n",
        "        \n",
        "        # Create a Passenger object and append it to the list of people\n",
        "        person = Passenger(location=init_floor, destination=destination, at_destination=0)\n",
        "        people.append(person)\n",
        "            \n",
        "    # A variable to keep track of how many people have arrived\n",
        "    arrived = 0\n",
        "    \n",
        "    \n",
        "    # A while loop that runs until everybody has arrived at their destination\n",
        "    while arrived < len(people):\n",
        "        \n",
        "        # The elevator runs from bottom to top, stop at each floors, unload/load\n",
        "        for i in range(num_floors - 1):\n",
        "            if print_status and arrived%4==1:\n",
        "              print('Current Locations: ', list(map(attrgetter('location'), people)))\n",
        "          \n",
        "            elevator.unload()\n",
        "            elevator.load(people)\n",
        "            elevator.move_up()\n",
        "            arrived = np.sum([person.location=='arrived' for person in people])\n",
        "            # if everyone has arrived, the loop terminates\n",
        "            if arrived == len(people):\n",
        "                break\n",
        "            # for each floor that the elevator stops at, add one to the counter\n",
        "            num_of_stops+=1  \n",
        "            \n",
        "        # Check if everyone has arrived    \n",
        "        if arrived == len(people):\n",
        "            break\n",
        "        \n",
        "        \n",
        "        # The elevator runs from top to bottom, stop at each floors, unload/load\n",
        "        for i in range(num_floors - 1):\n",
        "            if print_status and arrived%4==1:\n",
        "              print('Current Locations: ', list(map(attrgetter('location'), people)))\n",
        "            \n",
        "            elevator.unload()\n",
        "            elevator.load(people)\n",
        "            elevator.move_down()\n",
        "            arrived = np.sum([person.location=='arrived' for person in people])\n",
        "            # if everyone has arrived, the loop terminates\n",
        "            if arrived == len(people):\n",
        "                break\n",
        "            num_of_stops+=1  \n",
        "            \n",
        "    \n",
        "    # Return the number of stops. In this case, it equals the number of floors that\n",
        "    # the elevator has travelled\n",
        "    return num_of_stops"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "OR-EX3jiujPH",
        "colab_type": "code",
        "outputId": "4605012a-2329-4876-aed9-396ab62a1a40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        }
      },
      "cell_type": "code",
      "source": [
        "strat_1 = strategy_1(start_floor=1, elev_cap=15, num_floors=12, num_people=100, print_status=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Current Locations:  [6, 6, 11, 9, 8, 'arrived', 3, 'on elevator', 'on elevator', 'on elevator', 11, 'on elevator', 10, 11, 10, 10, 11, 12, 8, 11, 'on elevator', 3, 11, 'on elevator', 'on elevator', 5, 10, 12, 3, 'on elevator', 4, 3, 3, 'on elevator', 'on elevator', 12, 11, 8, 8, 9, 6, 5, 9, 7, 10, 'on elevator', 12, 'on elevator', 8, 10, 3, 8, 9, 11, 5, 'on elevator', 3, 11, 4, 4, 3, 'on elevator', 11, 5, 4, 3, 8, 7, 10, 8, 9, 7, 4, 11, 10, 4, 8, 7, 7, 'on elevator', 8, 5, 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  [6, 6, 11, 9, 8, 'arrived', 'on elevator', 'arrived', 'on elevator', 'on elevator', 11, 'on elevator', 10, 11, 10, 10, 11, 12, 8, 11, 'on elevator', 3, 11, 'arrived', 'on elevator', 5, 10, 12, 3, 'on elevator', 'on elevator', 3, 3, 'arrived', 'on elevator', 12, 11, 8, 8, 9, 6, 5, 9, 7, 10, 'on elevator', 12, 'on elevator', 8, 10, 3, 8, 9, 11, 5, 'on elevator', 3, 11, 'on elevator', 'on elevator', 3, 'on elevator', 11, 5, 4, 3, 8, 7, 10, 8, 9, 7, 4, 11, 10, 4, 8, 7, 7, 'arrived', 8, 5, 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['on elevator', 'on elevator', 11, 9, 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 11, 'on elevator', 10, 11, 10, 10, 11, 12, 'on elevator', 11, 'on elevator', 3, 11, 'arrived', 'arrived', 'on elevator', 10, 12, 3, 'on elevator', 'on elevator', 3, 3, 'arrived', 'on elevator', 12, 11, 'on elevator', 8, 9, 6, 5, 9, 'on elevator', 10, 'arrived', 12, 'on elevator', 8, 10, 3, 8, 9, 11, 5, 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 5, 4, 3, 8, 'arrived', 10, 8, 9, 7, 4, 11, 10, 4, 8, 7, 7, 'arrived', 8, 5, 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'on elevator', 11, 12, 'arrived', 11, 'arrived', 3, 11, 'arrived', 'arrived', 'arrived', 'on elevator', 12, 3, 'arrived', 'on elevator', 3, 3, 'arrived', 'arrived', 12, 11, 'on elevator', 8, 9, 6, 5, 9, 'on elevator', 10, 'arrived', 12, 'on elevator', 8, 10, 3, 8, 9, 11, 5, 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 5, 4, 3, 8, 'arrived', 10, 8, 9, 7, 4, 11, 10, 4, 8, 7, 7, 'arrived', 8, 5, 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'on elevator', 'arrived', 11, 'arrived', 3, 11, 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 3, 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 8, 9, 6, 5, 9, 'on elevator', 10, 'arrived', 12, 'arrived', 8, 10, 3, 8, 9, 11, 5, 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 5, 4, 3, 8, 'arrived', 10, 8, 9, 7, 4, 11, 10, 4, 8, 7, 7, 'arrived', 8, 5, 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 3, 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 3, 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 9, 'on elevator', 'on elevator', 9, 'arrived', 'arrived', 'arrived', 12, 'arrived', 'arrived', 'on elevator', 3, 'on elevator', 9, 11, 'on elevator', 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 'on elevator', 4, 3, 'arrived', 'arrived', 10, 8, 9, 'on elevator', 4, 11, 10, 4, 8, 7, 7, 'arrived', 8, 'on elevator', 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 3, 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 9, 'on elevator', 'on elevator', 9, 'arrived', 'arrived', 'arrived', 12, 'arrived', 'arrived', 'on elevator', 3, 'on elevator', 9, 11, 'on elevator', 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 'on elevator', 'on elevator', 3, 'arrived', 'arrived', 10, 8, 9, 'arrived', 'on elevator', 11, 10, 'on elevator', 8, 7, 7, 'arrived', 8, 'on elevator', 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 3, 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 9, 'on elevator', 'on elevator', 9, 'arrived', 'arrived', 'arrived', 12, 'arrived', 'arrived', 'on elevator', 3, 'on elevator', 9, 11, 'on elevator', 'arrived', 3, 11, 'arrived', 'on elevator', 3, 'arrived', 11, 'on elevator', 'on elevator', 3, 'arrived', 'arrived', 10, 8, 9, 'arrived', 'on elevator', 11, 10, 'on elevator', 8, 7, 7, 'arrived', 8, 'on elevator', 12, 8, 7, 12, 8, 5, 2, 5, 2, 12, 5, 3, 7, 7, 2, 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 9, 'on elevator', 'on elevator', 9, 'arrived', 'arrived', 'arrived', 12, 'arrived', 'arrived', 'arrived', 3, 'on elevator', 9, 11, 'on elevator', 'arrived', 3, 11, 'arrived', 'arrived', 3, 'arrived', 11, 'on elevator', 'on elevator', 3, 'arrived', 'arrived', 10, 8, 9, 'arrived', 'on elevator', 11, 10, 'on elevator', 8, 7, 7, 'arrived', 8, 'on elevator', 12, 8, 7, 12, 8, 5, 'on elevator', 5, 'on elevator', 12, 5, 3, 7, 7, 'on elevator', 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 9, 'on elevator', 'on elevator', 9, 'arrived', 'arrived', 'arrived', 12, 'arrived', 'arrived', 'arrived', 3, 'on elevator', 9, 11, 'on elevator', 'arrived', 3, 11, 'arrived', 'arrived', 3, 'arrived', 11, 'on elevator', 'on elevator', 3, 'arrived', 'arrived', 10, 8, 9, 'arrived', 'on elevator', 11, 10, 'on elevator', 8, 7, 7, 'arrived', 8, 'on elevator', 12, 8, 7, 12, 8, 5, 'on elevator', 5, 'on elevator', 12, 5, 3, 7, 7, 'on elevator', 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 3, 'arrived', 'arrived', 11, 'arrived', 'arrived', 3, 11, 'arrived', 'arrived', 3, 'arrived', 11, 'arrived', 'arrived', 3, 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'on elevator', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 8, 'on elevator', 'on elevator', 8, 'arrived', 'arrived', 5, 'arrived', 12, 5, 3, 'on elevator', 'arrived', 'arrived', 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 3, 3, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 3, 'arrived', 'arrived', 11, 'arrived', 'arrived', 3, 11, 'arrived', 'arrived', 3, 'arrived', 11, 'arrived', 'arrived', 3, 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'on elevator', 8, 'arrived', 'arrived', 5, 'arrived', 12, 5, 3, 'on elevator', 'arrived', 'arrived', 8, 4, 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 11, 'arrived', 'arrived', 3, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'on elevator', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'on elevator', 3, 'arrived', 'arrived', 'arrived', 8, 'on elevator', 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 3, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'on elevator', 3, 'arrived', 'arrived', 'arrived', 8, 'on elevator', 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 3, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'on elevator', 3, 'arrived', 'arrived', 'arrived', 8, 'on elevator', 3]\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'on elevator']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 8, 'on elevator', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 11, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 12, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "mJyzYKCjsUs9",
        "colab_type": "code",
        "outputId": "73425e78-1f07-4d7b-b9e7-d576137bb002",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# The average number of stops after running 100 simulations with\n",
        "# specified parameters for the first strategy\n",
        "stops_1 = []\n",
        "for i in range(100):\n",
        "    stops_1.append(strategy_1(start_floor=1, elev_cap=15, num_floors=12, num_people=1000))\n",
        "print('The average number of stops: %f' %np.mean(stops_1))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The average number of stops: 691.550000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "gKMx81KhoPjy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Strategy 2:\n",
        "The elevator begins on the ground floor and accepts all passengers waiting there or as many as it can carry. If there are no passengers on the ground floor, it moves to the first floor and does the same thing, etc. After encountering a floor with passengers, the elevator drops off the passengers in the order that they enter the elevator. At each floor the elevator drops passengers off, it accepts as many new passengers as it can hold and they are placed at the end of the dropoff queue. If the elevator is ever empty (drops off all passengers and no more have gotten on), it move up/down to the next floor with waiting passengers. "
      ]
    },
    {
      "metadata": {
        "id": "Ih-r3bvvtgt_",
        "colab_type": "code",
        "outputId": "9bf8a4d7-e354-4010-f726-9eb1174ba621",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "# Brian Strategy 2\n",
        "\n",
        "# Create a new class for the 2nd strategy that inherits Building and Elavator classes\n",
        "class Strategy2(Building, Elevator):\n",
        "  def __init__(self, location = 0 , capacity=15, num_floors = 12, num_people = 400, log = True, optimal = False): #Predefined the arguments since we standardized them. \n",
        "    Building.__init__(self, num_floors = num_floors) #Inherited the Building Class and initialized it\n",
        "    Elevator.__init__(self, location = location, capacity=capacity) #Inherited the elvator class and initiated it\n",
        "    self.num_people = num_people #Initiated a class variable, num people\n",
        "    self.log = log\n",
        "    self.optimal = optimal\n",
        "    \n",
        "  \"\"\"\n",
        "  Is the engine behind spawning. Spawn is used to initiate the passengers but initiate is the one that creates them\n",
        "  At any floor where delivery is happening, initiate is called to generate a passenger list. \n",
        "  It generates a passenger list with a max number of the empty capacity\n",
        "  \"\"\"\n",
        "  def initiate(self,start_pass, occupancy, start, floor):#Define initiate method that generates passengers\n",
        "    if start:#If start meaning when turning on the elvator, it is empty so maximum entry is full capacity. Randomized either way\n",
        "      num_passengers = random.randint(0, self.capacity)\n",
        "    else:#Otherwise, the elevator has been at work\n",
        "      num_passengers = random.randint(0, occupancy)# Maximum entry capacity is equal to the occupancy,\n",
        "    passengers = {}#Initiate the passenger list token\n",
        "    #Assign destinations\n",
        "    for pas in range(0, num_passengers):#Create as many passengers as the num_passengers randomly generated\n",
        "      passengers[start_pass + pas] = {\"Passenger_id\":''.join([random.choice(string.ascii_letters + string.digits) for n in range(8)]),#Unique passenger id created\n",
        "                         \"Passenger\": Passenger(location = floor, destination = random.choice([i for i in range(0,floor)]+[i for i in range(floor+1,self.num_floors)]),\n",
        "                                                at_destination = False)#Each passenger is instance of the passenger class. Random destinations selected\n",
        "                        }\n",
        "    return passengers\n",
        "  \n",
        "  \n",
        "  \"\"\"\n",
        "  This is used to initiate the system. It starts at floor 0, if there are no passengers, it goes to the next floor\n",
        "  and calls initiate again. It does so until it finds a passenger, after which it breaks and returns the passenger list\n",
        "  \"\"\"\n",
        "  def spawn_passengers(self):\n",
        "    for flo in range(self.num_floors):\n",
        "      pass_bunch = self.initiate(start = True, start_pass = 0, occupancy = self.capacity,  floor = self.location)#At the start, the starting passengers are 0, we spawn with full capacity and spawn as false\n",
        "      if self.log:\n",
        "        print(f\"Picked up {len(pass_bunch)} passengers on floor {flo}, empty space = {self.capacity - len(pass_bunch)}\")\n",
        "      #if the first floor is empty, it moves to the second and does the same:\n",
        "      if len(pass_bunch) == 0:#We move up floors if the starting bunch is 0. we move up. \n",
        "        #I was going to implement the logic such that we keep going up and when up we start going down if no passenger is found but the probability of that happening is so low at out capacity\n",
        "        #The code section would be almost vestigial at that point. There will always be someone to be picked up in the up movement and they would initiate the motion.\n",
        "        self.move_up()\n",
        "      else:\n",
        "        break\n",
        "    if self.log:\n",
        "      print(\"\\n\")\n",
        "\n",
        "    return pass_bunch\n",
        "  \n",
        "  \n",
        "  \"\"\"\n",
        "  This is the delivery engine. It run on condition that we have passengers in the elevator.\n",
        "  It delivers them in the order they enter. At any delivery point, it checks for new passengers to current empty capacity max.\n",
        "  If new passengers are present, it adds them by combining them with the current set, but gives them an entry order.\n",
        "  It does so until the elevator is empty\n",
        "  \"\"\"\n",
        "  def deliver_passengers(self):\n",
        "    passengers = self.spawn_passengers() #At the start we spawn passengers\n",
        "    order = list(passengers.keys())#I forced a list of the entry order to allow the dict to be mutable\n",
        "    served = []#You can used the served list to check the status of each passenger served\n",
        "    stop_count = 0 #Counter of stops\n",
        "    floor_count = 0#Counter of floors\n",
        "    picked_up = len(passengers) #Counter for number of picked up passengers\n",
        "    while len(passengers) >0:#Keep all passengers leave train\n",
        "      cur_pas = passengers[order[0]]#The current passenger in service will always be the first one to enter on the ordered list\n",
        "      floor_count += abs(cur_pas['Passenger'].destination-cur_pas['Passenger'].location) #Count number of floors travelled: Is abs end(destination)- start(location)  for current passenger.\n",
        "      if self.log:\n",
        "        print(f\"################################## Door open on on floor: {cur_pas['Passenger'].destination} ##################################\")\n",
        "      \"\"\"\n",
        "        To optimize the strategy, we will unload any passenger whose destinaation is reached regardless of entry order. It also cleans up the rare case(Due to randomization) where a passenger's enty and destination are the same. \n",
        "      \"\"\"\n",
        "      if self.optimal:\n",
        "        for  oe in order:#None the less, we will still check if any passenger has reached their = destination floor\n",
        "          if passengers[oe][\"Passenger\"].destination == cur_pas['Passenger'].destination:\n",
        "            passen = passengers[oe] #Make this a variable to allow for dict mutation\n",
        "            passen[\"Passenger\"].at_destination =  1 #Update the passenger list\n",
        "            served.append(passen) #Save the served passengers in the list for verification if needed\n",
        "            #Delete from record delivered passengers\n",
        "            del passengers[oe]#Delete them from the token of current passengers if they are delivered\n",
        "            if self.log:\n",
        "              print(f\"Delivered passenger {passen['Passenger_id']}, entry order {oe} on floor {passen['Passenger'].location}\"\\\n",
        "                    +f\" to floor {passen['Passenger'].destination}. Empty space: {self.capacity -len(passengers)}\")#Log statement showing they were delivered\n",
        "\n",
        "      else:\n",
        "        oe = order[0]\n",
        "        passen = passengers[oe] #Make this a variable to allow for dict mutation\n",
        "        passen[\"Passenger\"].at_destination =  1 #Update the passenger list\n",
        "        served.append(passen) #Save the served passengers in the list for verification if needed\n",
        "        #Delete from record delivered passengers\n",
        "        del passengers[oe]#Delete them from the token of current passengers if they are delivered\n",
        "        if self.log:\n",
        "          print(f\"Delivered passenger {passen['Passenger_id']}, entry order {oe} on floor {passen['Passenger'].location}\"\\\n",
        "                  +f\" to floor {passen['Passenger'].destination}. Empty space: {self.capacity -len(passengers)}\")#Log statement showing they were delivered\n",
        "        \n",
        "      #Pickup only till we have served stated num people. terminate when serving is done\n",
        "      if picked_up < self.num_people:\n",
        "        pickup = self.initiate(start_pass = max(order)+1, occupancy = self.capacity - len(passengers), start=False, floor = cur_pas['Passenger'].destination)#At any floor, also pickup passengers. Start is false\n",
        "        picked_up += len(pickup)\n",
        "      else:\n",
        "        pickup = {}#No pickup once we have \"About\" num_people passengers in elevator. This was limited since the last pickup can push this a bit over but rarely too much\n",
        "      passengers = {**passengers, **pickup} #Combine token of generated and spawed passengers.\n",
        "      if self.log:\n",
        "        print(f\"Picked up {len(pickup)} passenger(s) on floor {cur_pas['Passenger'].destination},occupants: {len(passengers)}, empty space: {self.capacity - len(passengers)}\")#Log picked up passengers\n",
        "      self.start_floor = cur_pas['Passenger'].location #Update the current starting floor.\n",
        "      if self.log:\n",
        "        print(f\"Number of passengers left {len(passengers)} \\n\") #Make a statement about passengers left.\n",
        "      order = list(passengers.keys())# Update the delivery order since some passengers have been unloaded.\n",
        "      #Update floor count\n",
        "      stop_count+=1#Count the number of stops\n",
        "    return {\"Number of stops\":stop_count, \"Number of floors\":floor_count, \"Served Passsengers\":served}\n",
        "\n",
        "#Uncomment Tests if you're curious what is happening\n",
        "#Test Case\n",
        "#el1 = Strategy2(log = True, optimal =True)#Include a log flag to turn on logs, optimal true\n",
        "#stats = el1.deliver_passengers()\n",
        "#print(stats)\n",
        "\n",
        "#Test Case\n",
        "#el2 = Strategy2(log = True, optimal =False)#Include a log flag to turn on logs, optimal False\n",
        "#stats = el2.deliver_passengers()\n",
        "#print(stats)\n",
        "\n",
        "#Simulation\n",
        "tot_stops = []\n",
        "simuls = 100\n",
        "for i in range(simuls):    \n",
        "  sim2 = Strategy2(log = False, optimal =True)#Include a log flag to turn off logs for faster simulation. Optimal turnt off\n",
        "  stat = sim2.deliver_passengers()\n",
        "  tot_stops.append(stat[\"Number of stops\"])\n",
        "  \n",
        "\"\"\"\n",
        "Clean up for a rare case wher the elevator didnt receive more pickups after first delivery set thus terminated. It rarely happens thus why I didnt prioritize it.\n",
        "\"\"\"\n",
        "\n",
        "\"\"\"\n",
        "This system focusses on the order of entry. At any exit, any passenger with that stop can leave regardless of the entry order,\n",
        "but the next stop it makes is the destination of the earliest passenger to enter in the bunch. It also picks up new passengers at each stop\n",
        "\n",
        "\n",
        "Strategy 3 prioritizes the destination that has the most passengers. \n",
        "On the long run, strategy 3 makes fewer stops than Brian's take on strategy 2.\n",
        "\"\"\"\n",
        "\n",
        "for el in tot_stops:\n",
        "  if el <20:\n",
        "    tot_stops.remove(el)\n",
        "print(f\"The average number of stops: {np.mean(tot_stops)}\\n\")\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The average number of stops: 168.96969696969697\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ABouEgMdsiIY",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Strategy 3: \n",
        "The elevator begins on the ground floor and accepts all passengers waiting there or as many as it can carry. If there are no passengers on the ground floor, it moves to the floor where the most people are waiting. Ties in the number of people waiting are awarded to the smallest floor. After picking up passengers, the elevator's destination is the mode (if the capacity is 5p and 3p want to go to floor 4, and 2p want to go to floor 3). Ties in destination-floor are awarded to the  floor with the lowest value."
      ]
    },
    {
      "metadata": {
        "id": "QM90_Yg3sfg0",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def strategy_3(start_floor, elev_cap, num_floors, num_people, print_status=False):\n",
        "    # Create an Elevator object and a Building object\n",
        "    elevator = Elevator(capacity=elev_cap, location=start_floor)\n",
        "    building = Building(num_floors)\n",
        "    stops = 0\n",
        "    floors_traveled = 0\n",
        "    \n",
        "    people=[]\n",
        "    \n",
        "    # Create Passenger objects and generate random starting\n",
        "    # and destination floors for each, similar to the first strategy\n",
        "    for i in range(num_people):\n",
        "        init_floor = random.randint(1, building.num_floors)\n",
        "        f = [x for x in range(1, building.num_floors + 1) if x != init_floor]\n",
        "        destination = random.choice(f)\n",
        "        person = Passenger(location=init_floor, destination=destination, at_destination=0)\n",
        "        people.append(person)\n",
        "    \n",
        "    # A while loop that runs until everyone has arrived at their destinations\n",
        "    while finish_check(people) is False:\n",
        "        \n",
        "        # Load and unload people\n",
        "        elevator.unload()\n",
        "        elevator.load(people)\n",
        "\n",
        "        \n",
        "        # To get the next floor if there are people in the elevator\n",
        "        if len(elevator.occupants)!=0:\n",
        "            # The next floor is the most popular destination, if there are more\n",
        "            # than one, choose the smallest one\n",
        "            destination_mode = int(stats.mode([person.destination for person in elevator.occupants])[0])\n",
        "            next_floor = destination_mode\n",
        "            \n",
        "        \n",
        "        # Stop the elevator if everyone has arrived\n",
        "        elif finish_check(people) is True:\n",
        "            break\n",
        "        # To get the next floor if there is no-one in the elevator\n",
        "        else:\n",
        "            # The next floor is where the most people waiting, if there are more\n",
        "            # than one, choose the smallest one\n",
        "            floor_mode = int(stats.mode([person.location for person in people\\\n",
        "                                         if isinstance(person.location,int)])[0])\n",
        "            next_floor = floor_mode\n",
        "            \n",
        "        \n",
        "            \n",
        "        # add the number of floors travelled between the current and next stops\n",
        "        floors_traveled += abs(next_floor-elevator.location)\n",
        "\n",
        "        # move the elevator to the next floor obtained above\n",
        "        elevator.to_floor(next_floor)\n",
        "        # add one stop to the counter\n",
        "        stops += 1\n",
        "        \n",
        "        if print_status:\n",
        "            print('Current Locations: ', list(map(attrgetter('location'), people)))\n",
        "\n",
        "    # Return the number of stops and the number of floors the elevator has travelled\n",
        "    return stops, floors_traveled\n",
        "\n",
        "# To check if everyone has arrived    \n",
        "def finish_check(people):\n",
        "    for passenger in people:\n",
        "        if passenger.location!='arrived':\n",
        "            return False\n",
        "    return True\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "QG-PUKKfv690",
        "colab_type": "code",
        "outputId": "311af85d-3269-4cdd-e6d6-22567f80c2a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        }
      },
      "cell_type": "code",
      "source": [
        "strat_3 = strategy_3(start_floor=1, elev_cap=15, num_floors=12, num_people=50, print_status=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Current Locations:  [7, 7, 6, 8, 7, 11, 8, 10, 4, 3, 4, 11, 12, 3, 12, 3, 11, 9, 4, 6, 6, 11, 3, 6, 8, 'on elevator', 2, 7, 'on elevator', 5, 7, 8, 'on elevator', 2, 3, 2, 10, 3, 2, 12, 9, 9, 5, 4, 4, 6, 6, 8, 2, 9]\n",
            "Current Locations:  [7, 7, 6, 8, 7, 11, 8, 10, 4, 3, 4, 11, 12, 3, 12, 3, 11, 9, 4, 6, 6, 11, 3, 6, 8, 'arrived', 'on elevator', 7, 'on elevator', 5, 7, 8, 'arrived', 'on elevator', 3, 'on elevator', 10, 3, 'on elevator', 12, 9, 9, 5, 4, 4, 6, 6, 8, 'on elevator', 9]\n",
            "Current Locations:  [7, 7, 6, 8, 7, 11, 8, 10, 4, 3, 4, 11, 12, 3, 12, 3, 11, 9, 4, 6, 6, 11, 3, 6, 8, 'arrived', 'on elevator', 7, 'on elevator', 5, 7, 8, 'arrived', 'on elevator', 3, 'on elevator', 10, 3, 'on elevator', 12, 9, 9, 5, 4, 4, 6, 6, 8, 'arrived', 9]\n",
            "Current Locations:  [7, 7, 6, 8, 7, 11, 8, 10, 4, 'on elevator', 4, 11, 12, 'on elevator', 12, 'on elevator', 11, 9, 4, 6, 6, 11, 'on elevator', 6, 8, 'arrived', 'arrived', 7, 'on elevator', 5, 7, 8, 'arrived', 'on elevator', 'on elevator', 'on elevator', 10, 'on elevator', 'on elevator', 12, 9, 9, 5, 4, 4, 6, 6, 8, 'arrived', 9]\n",
            "Current Locations:  [7, 7, 6, 8, 7, 'on elevator', 8, 10, 4, 'on elevator', 4, 'on elevator', 12, 'arrived', 12, 'on elevator', 'on elevator', 9, 4, 6, 6, 'on elevator', 'arrived', 6, 8, 'arrived', 'arrived', 7, 'on elevator', 5, 7, 8, 'arrived', 'on elevator', 'on elevator', 'on elevator', 10, 'arrived', 'on elevator', 12, 9, 9, 5, 4, 4, 6, 6, 8, 'arrived', 9]\n",
            "Current Locations:  [7, 7, 6, 8, 7, 'arrived', 8, 10, 4, 'arrived', 4, 'on elevator', 12, 'arrived', 12, 'on elevator', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 8, 'arrived', 'arrived', 7, 'on elevator', 5, 7, 8, 'arrived', 'on elevator', 'on elevator', 'on elevator', 10, 'arrived', 'on elevator', 12, 'on elevator', 'on elevator', 5, 4, 4, 6, 6, 8, 'arrived', 'on elevator']\n",
            "Current Locations:  [7, 7, 6, 8, 7, 'arrived', 8, 10, 4, 'arrived', 4, 'on elevator', 'on elevator', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 8, 'arrived', 'arrived', 7, 'on elevator', 5, 7, 8, 'arrived', 'arrived', 'on elevator', 'on elevator', 10, 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['on elevator', 'on elevator', 6, 8, 'on elevator', 'arrived', 8, 10, 4, 'arrived', 4, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 8, 'arrived', 'arrived', 'on elevator', 'on elevator', 5, 'on elevator', 8, 'arrived', 'arrived', 'on elevator', 'arrived', 10, 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['on elevator', 'on elevator', 6, 'on elevator', 'arrived', 'arrived', 'on elevator', 10, 4, 'arrived', 4, 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 10, 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 'arrived', 4, 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 4, 'arrived', 4, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['on elevator', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 4, 'arrived', 4, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'on elevator', 'arrived', 6, 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 6, 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 4, 'arrived', 4, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 6, 6, 'arrived', 'arrived', 6, 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 5, 4, 4, 6, 6, 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 4, 'arrived', 4, 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 4, 'on elevator', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 4, 4, 'on elevator', 'on elevator', 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 'on elevator', 'on elevator', 'on elevator', 'on elevator', 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 5, 'on elevator', 'on elevator', 'on elevator', 'arrived', 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'on elevator', 'arrived', 8, 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'on elevator', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n",
            "Current Locations:  ['arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'arrived', 'on elevator', 'arrived', 'arrived', 'arrived', 'arrived']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "olsxyzpntBbl",
        "colab_type": "code",
        "outputId": "fef8d632-d2c4-4f2d-9300-74049e83fd84",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "# Get the average numbers of stops made and floors travelled by the elevator\n",
        "# after running 100 simulations with specified parameters for the 3rd strategy\n",
        "stops_3=[]\n",
        "floors_traveled_3=[]\n",
        "for i in range(100):\n",
        "    a, b = strategy_3(start_floor=1, elev_cap=15, num_floors=12, num_people=400)\n",
        "    stops_3.append(a)\n",
        "    floors_traveled_3.append(b)\n",
        "\n",
        "print('The average number of stops: %f' % np.mean(stops_3))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The average number of stops: 166.750000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "57W9p1NFoe6c",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Comparison of the three strategies"
      ]
    },
    {
      "metadata": {
        "id": "AjbTapDjods4",
        "colab_type": "code",
        "outputId": "c1a3f0af-3c9b-4aee-c8ca-ccd2c35ac66a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "# Comparison of the three strategies\n",
        "plt.hist(stops_3, fc=(0, 0, 1, 0.5))\n",
        "plt.hist(stops_1, fc=(0, 0, 0, 0.5))\n",
        "plt.hist(tot_stops, color='r', fc=(1, 0, 0, 0.5))\n",
        "plt.title(\"Comparison of 3 strategies\")\n",
        "plt.ylabel(\"Number of occurences\")\n",
        "plt.xlabel(\"Number of stops\")\n",
        "plt.legend([\"Strategy 3\",\"Strategy 1\", \"Strategy 2\"])\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}